use std::env;
use std::fs;
use std::path::Path;
use walkdir::WalkDir;

fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let destination = Path::new(&out_dir).join("rules.rs");

    let mut rule_mods = Vec::new();
    let mut rule_registrations = Vec::new();

    println!("cargo:rerun-if-changed=src/rules");

    for entry in WalkDir::new("src/rules").into_iter().filter_map(|e| e.ok()) {
        let path = entry.path();
        if path.is_file() {
            if let Some(file_stem) = path.file_stem().and_then(|s| s.to_str()) {
                // Adjust this list to ignore any non-rule files in the directory
                if file_stem != "mod" && file_stem != "utils" && file_stem != "parameterized_tests"
                {
                    println!("cargo:rerun-if-changed={}", path.display());

                    // Generate: mod my_rule;
                    rule_mods.push(format!("mod {};", file_stem));

                    // Generate: my_rule::get_rule(),
                    rule_registrations.push(format!("{}::get_rule(),", file_stem));
                }
            }
        }
    }

    let generated_code = format!(
        "// This file is automatically generated by build.rs\n\
         // Do not edit manually.\n\
         \n\
         {}\n\
         \n\
         pub fn get_rules() -> Vec<Rule> {{\n\
             vec![\n\
                 {}\n\
             ]\n\
         }}",
        rule_mods.join("\n"),
        rule_registrations.join("\n                 ")
    );

    fs::write(&destination, generated_code).unwrap();
}
